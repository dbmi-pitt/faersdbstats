1. Exported unmapped drug names from FAERS to FAERS-drug-mapping-table-May2019-COPY-II.csv

2. Split the file into 10 parts using

$ split -n l/10 FAERS-drug-mapping-table-May2019-COPY-II.csv

3. xaa.csv was cleaned to remove stray symbols and noisy text and then loaded into open office and exported as xaa.xlsx

4. xaa.xlsx loaded into Usagi

5. Score matches from 1.0 to 9.4 were accepted because review indicated these are highly accurate

6. Picked drugs with at least 100 reports after sorting by frequency. Pharmacist review indicated which rows should be mapped

7. Ran xaa-subset-to-100-expert-filtered.txt through MetaMap and pharmacists reviewed to confirm mappings to Metathesaurus concepts

$ ./bin/metamap -G -I --JSONf 2 -R "RXNORM,ATC" --conj  /home/faersdbstats/data/xaa-subset-to-100-expert-filtered.txt /home/faersdbstats/data/xaa-subset-to-100-expert-filtered-METAMAP.json

$ python parse-METAMAP.py > xaa-subset-to-100-expert-filtered-METAMAP.tsv

-- In postgres
-- mapping from RxNorm codes derived from UMLS CUI match to omop concept ids in order so that we can copy back to the spreadsheet.
-- The output of this query was imported as a sheet into the excel workbook and then I used a formula to copy the concept_id and concept_name columns
-- to the right of the source string and UMLS output. For example  -- =VLOOKUP(B2,$<sheet name>.$A$1:$C$385,2,0) 
with t1 as (
 select code 
 from 
 unnest(
  ARRAY['94','161','435','435','435','448','725','1011','1011','1011','1011','1011','1011','1151','1151','1151','1151','1191','1191','1191','1191','1191','1191','1191','1191','1191','1191','1191','1191','1191','1514','1895','1897','2062','2369','2372','2418','2418','2418','2447','2447','2447','2447','2556','2955','3304','3523','3523','3634','4018','4018','4099','4099','4100','4257','4301','4301','4301','4301','4301','4301','4381','4381','4419','4419','4419','4448','4495','4502','4511','4603','4603','4603','4603','4617','4885','4917','5224','5228','5464','5521','5880','5992','6058','6095','6313','6375','6404','6404','6417','6574','6633','6686','6802','6851','6852','7393','7393','7512','7597','7646','8214','8308','8308','8308','8308','8354','8519','8591','8825','8825','8826','8871','8887','8928','9504','9504','9511','9524','9853','9863','9877','10826','10831','10831','10831','10831','10831','10831','10831','10831','10831','10831','11149','11149','11246','11248','11248','11248','11248','11248','11248','11248','11248','11248','11248','11251','11251','11251','11253','11253','11253','11256','11256','11256','17315','17315','17767','18867','18891','19143','19711','19711','19711','19711','19711','19711','19711','19711','19711','19711','21406','21406','21406','21406','21655','22656','22759','23088','24947','24947','24947','25655','28908','28908','28908','29046','29046','29115','29115','29144','29144','29144','29421','29961','29961','32968','33688','33688','33688','34132','34482','34552','36118','36387','36387','36387','36387','36387','36387','36387','36434','36437','36437','36437','36437','36572','36709','39625','39625','39786','39786','39879','40790','42386','42386','42781','42844','42892','42954','47630','48274','48274','48274','48274','51428','51428','51428','54536','58930','58930','67031','68729','71504','71517','74169','74169','82001','82110','82728','83373','84815','84815','84815','84815','86009','90176','90650','91235','91235','97016','97016','100278','103990','103990','103990','103990','103990','104129','104966','105694','105694','105694','105694','105694','107044','107044','107602','114194','114265','121191','125933','125933','125933','125933','125933','135091','135091','135091','135805','142153','142153','142153','142440','151131','151195','151363','151392','151399','151692','152364','152490','152523','153326','155137','166283','174742','191831','191831','196500','202421','202432','202433','202488','202554','202796','202796','202886','202896','202961','202991','203133','203152','203197','203221','203514','203576','203856','204213','204213','214181','214181','214182','214182','214182','214182','214182','214182','214182','214182','214182','214183','214183','214183','214183','214199','214287','214317','214355','214444','214502','214502','214536','214558','214618','214619','214619','214619','214619','214619','214621','214652','214682','215101','215101','215101','215122','215458','215822','215850','215850','216069','216069','216253','216652','217020','217020','217020','217020','217263','217332','217905','218337','218365','218754','218772','219866','220187','220343','220586','220586','220586','220586','220913','221129','224921','225741','227357','227579','227581','227682','227719','228041','228041','234449','235473','235559','235559','235750','235988','236081','236344','236344','236344','236474','236632','236665','236809','236809','236809','253146','253182','253182','253182','253183','253206','253206','253210','258326','259265','259274','259274','261442','261624','261624','262296','265647','267741','283579','283579','284635','284635','284635','284810','284810','284810','284810','284810','284810','285129','285155','285245','301543','301543','314659','318224','318224','318340','325526','327148','339855','352362','352362','352362','352393','352393','352393','352657','352657','352777','353102','353484','353484','355460','386147','389132','389132','389132','393575','400008','407838','466584','466584','471329','471329','475968','475968','491666','541555','542373','542409','583099','583099','594040','603849','603853','604751','605477','605477','607583','614534','614534','614534','616011','619749','637366','662263','687620','701647','705034','709271','746946','746962','748886','750149','798306','798306','800000','800041','800041','800058','800058','800067','800071','800112','801195','801195','801793','801793','817579','817579','817579','817579','817579','817579','817579','817579','817579','817579','826070','827148','827249','828529','830645','840781','849730','857045','865575','897123','897123','901351','901351','902621','968897','1007761','1007814','1009148','1045350','1045350','1045350','1045350','1045350','1045350','1045350','1046243','1046243','1114883','1236136','1242964','1300473','1300478','1306128','1310635','1313305','1318915','1318915','1362746','1364429','1372730','1372738','1372744','1372744','1424174','1424174','1424910','1426822','1439770','1442200','1487520','1546084','1592713','1597388','1657875','1658460','1670383','1790640','1799374','1799374','1858996','1860168']
  ) code
) 
select * from t1 inner join staging_vocabulary.concept c on t1.code = c.concept_code 
where c.vocabulary_id in ('RxNorm','RxNorm Extension')
;


8. 600 were mapped to RxNorm concepts but only 496 cross-walked to an OMOP concept_id from RxNorm. There are 104 that did not but that seem to have an RxNorm code. So, we will have to figure out what to do with these. 

9. I combined the data into different sheets in the workbook xaa-subset-to-100-expert-filtered-mapping-workbook.xlsx. The Usagi and UMLS mappings were combined into the usagi_import sheet. This was imported into the usagi_import table in the faers schema. Ran the load_drug_usagi_mapping.sql and then this query from map_all_drugname_to_rxnorem.sql

-- update using drug_usagi_mapping
-- manually curated drug mappings
UPDATE combined_drug_mapping a
SET  update_method = b.update_method , lookup_value = b.concept_name, concept_id = b.concept_id
FROM drug_usagi_mapping b
WHERE upper(a.drug_name_original) = upper(b.drug_name_original)
and a.concept_id is null
and b.concept_id is not null;

10. Ran generate_drug_export_for_usagi.sql again to see what remains to be mapped and the associated spontaneous report frequencies - drugs-unmapped-June2019.dsv

11. ran the remaining drug names through the metamap

$ cat drugs-unmapped-June2019.dsv| cut -d\| -f2 > /tmp/drugs-unmapped-June2019.txt

# removed the header

$ split -l 10000 drugs-unmapped-June2019.txt du-

# went through each file and removed tab  and  characters

# (in ZSH) 
$ for i in du-*
./bin/metamap -G -I --JSONf 2 -R "RXNORM,ATC" --conj $i  /home/faersdbstats/data/$i.json

12. Converted the JSON output to TSV for every file

$ for i in du*json
echo $i && python parse-METAMAP.py -i $i > $i.tsv



